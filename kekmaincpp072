#include "iter.hpp"
#include <string>
#include <iostream>

template <typename T>
void func(T const & a)
{
	std::cout << a << std::endl;
}

class Awesome
{
	public:
		Awesome(void):_n(42){return ;}
		int get(void) const {return this->_n;}
	private:
		int _n;
};
std::ostream & operator <<(std::ostream &o, Awesome const & rhs) {o << rhs.get(); return o;}
template<typename T>
void print(T const & x) {std::cout << x << std::endl; return ;}

int main()
{
	int kek[5] = {0, 1, 2, 3, 4};
	std::string skek[3] = {"0", "1", "2"};
	::iter(kek, 5, func);
	::iter(skek, 3, func);


	int tab[] = {0, 1, 2, 3, 4};
	Awesome tab2[5];
	iter(tab, 5, print);
	iter(tab2, 5, print);
	return 0;
}
