#include "whatever.hpp"
#include <iostream>

class Awesome
{
	public:
		Awesome(int n): _n(n){}
		bool operator==(Awesome const & rhs) const {return (this->_n == rhs._n);}
		bool operator!=(Awesome const & rhs) const {return (this->_n != rhs._n);}
		bool operator>(Awesome const & rhs) const {return (this->_n > rhs._n);}
		bool operator<(Awesome const & rhs) const {return (this->_n < rhs._n);}
		bool operator>=(Awesome const & rhs) const {return (this->_n >= rhs._n);}
		bool operator<=(Awesome const & rhs) const {return (this->_n <= rhs._n);}
		int getN(void) {return _n;};
	private:
		int _n;
};

int main( void )
{
	Awesome a(2);
	Awesome b(3);
	::swap( a, b );
	std::cout << "a = " << a.getN() << ", b = " << b.getN() << std::endl;
	std::cout << "min( a, b ) = " << ::min( a, b ).getN() << std::endl;
	std::cout << "max( a, b ) = " << ::max( a, b ).getN() << std::endl;
	std::string c = "chaine1";
	std::string d = "chaine2";
	::swap(c, d);
	std::cout << "c = " << c << ", d = " << d << std::endl;
	std::cout << "min( c, d ) = " << ::min( c, d ) << std::endl;
	std::cout << "max( c, d ) = " << ::max( c, d ) << std::endl;
	return 0;
}
